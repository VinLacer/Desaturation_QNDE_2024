# -*- coding: utf-8 -*-
"""thickness_real.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RSWKUpmr0bXRXA9-aQNZjx6x4bsV94L2

Before running, please upload [template_waveform.npz](https://drive.google.com/open?id=15K2BUfgGA2t6wP0msf4lnjk3hrtiKdov&usp=drive_fs) to the file envorinment.
"""

import numpy as np
from numpy.linalg import norm
import matplotlib.pyplot as plt
from scipy.signal import gausspulse, hilbert
from scipy.fft import fft, fftshift, fftfreq, ifft
from scipy.linalg import dft

def saturate(signal, max, min=None):
  if min is None:
    min = - max
  saturated = np.copy(signal)
  saturated[signal>max] = max
  saturated[signal<min] = min
  valid = np.ones_like(signal)
  valid[signal>=max] = 0
  valid[signal<=min] = 0
  return saturated, valid

def desaturate_dsls(g, decimator, wmin, wmax):
# Decimated Subspace Least Squares (DSLS) (proposed method)
  D = np.diag(decimator)
  D = D[decimator>0, :]
  H = dft(len(g))
  Omega = fftfreq(len(g))
  HB = H[:, (wmin <= np.abs(Omega))*(np.abs(Omega) <= wmax)]
  b = D@g
  A = D@HB
  x = np.linalg.lstsq(A, b)
  d = HB @ x[0]
  d = np.real(d)
  return [d, 0]

def desaturate_pgi(g, decimator, wmin, wmax, niter=10000):
# Papoulis Gerchberg Iteration (PGI) (competing method)
  g0 = np.copy(g)
  Omega = fftfreq(len(g))
  def ideal_band_pass(g,  wmin, wmax):
    G = fft(g)
    G[np.abs(Omega) <= wmin] = 0.
    G[np.abs(Omega) >= wmax] = 0.
    g_ = np.real(ifft(G))
    return g_
  decimator = np.array(decimator, dtype=bool)
  deltas = np.zeros(niter)
  g_bp = ideal_band_pass(g, wmin, wmax)
  g_sub = g_bp
  g_sub[decimator] = g[decimator]
  g = g_sub
  for i in np.arange(1, niter):
    g_bp = ideal_band_pass(g, wmin, wmax)
    g_sub = g_bp
    g_sub[decimator] = g[decimator]
    deltas[i] = np.sum(g_sub*g0)/(norm(g_sub)*norm(g0))
    g = g_sub
  g_bp = ideal_band_pass(g, wmin, wmax)
  return [g_bp, deltas]



figsize=(6/1.2,3/1.2)

f_s = 125e6


######### PARAMETERS #########
wmin = .0135 # [rad/sample]
#wmin = .005 # [rad/sample]
wmax = .0675 # [rad/sample]
#wmax = .08 # [rad/sample]
gate_init, gate_end = 298, 1700 # sample
f_s = 125e6 # [Hz]
##############################


npz_data = np.load('template_waveform.npz', allow_pickle=True)
data = npz_data['ascans']
gains = npz_data['gains']
pulse = np.array(data[0, gate_init:gate_end], dtype=float)
pulse = pulse/np.max(np.abs(pulse))
t = np.arange(len(pulse)) / f_s

fs_dsls = [None] * len(gains)
fs_pgi = [None] * len(gains)
peaks_dsls = [None] * len(gains)
peaks_pgi = [None] * len(gains)
peaks_sat = [None] * len(gains)
peaks2_dsls = [None] * len(gains)
peaks2_pgi = [None] * len(gains)
peaks2_sat = [None] * len(gains)
gs = [None] * len(gains)
decimators = [None] * len(gains)
factors = [None] * len(gains)
corrs_dsls = [None] * len(gains)
corrs_pgi = [None] * len(gains)
deltas = [None] * len(gains)
for i in range(len(gains)):
  g = data[i, gate_init:gate_end]
  g, decimator = saturate(g, 32767/4)
  g = np.array(g, dtype=float)
  peak_sat = np.argmax(np.abs(hilbert(g))[:600])
  peak2_sat = np.argmax(np.abs(hilbert(g))[600:])+600
  result = desaturate_dsls(g, decimator, wmin=wmin, wmax=wmax)
  f_dsls = result[0]
  corr_dsls = np.sum(f_dsls*pulse) / (norm(f_dsls)*norm(pulse))
  peak_dsls = np.argmax(np.abs(hilbert(f_dsls))[:600])
  peak2_dsls = np.argmax(np.abs(hilbert(f_dsls))[600:])+600
  result = desaturate_pgi(g, decimator, wmin=wmin, wmax=wmax)
  f_pgi = result[0]
  corr_pgi = np.sum(f_pgi*pulse) / (norm(f_pgi)*norm(pulse))
  peak_pgi = np.argmax(np.abs(hilbert(f_pgi))[:600])
  peak2_pgi = np.argmax(np.abs(hilbert(f_pgi))[600:])+600
  factor = pulse.max() / f_dsls.max()
  # Store individual values on lists
  decimators[i] = decimator
  gs[i] = g
  fs_dsls[i] = f_dsls
  fs_pgi[i] = f_pgi
  factors[i] = np.copy(factor)
  corrs_dsls[i] = corr_dsls
  corrs_pgi[i] = corr_pgi
  peaks_dsls[i] = peak_dsls
  peaks_pgi[i] = peak_pgi
  peaks_sat[i] = peak_sat
  peaks2_dsls[i] = peak2_dsls
  peaks2_pgi[i] = peak2_pgi
  peaks2_sat[i] = peak2_sat

thickness = 25.11e-3
ground_truth = peaks2_sat[0] - peaks_sat[0]
c = 2 * 25.11e-3 * f_s / ground_truth
print(c)
error_dsls = .5e3 * c * np.abs(np.array(peaks2_dsls)-np.array(peaks_dsls)-ground_truth) / f_s
error_pgi = .5e3 * c * np.abs(np.array(peaks2_pgi)-np.array(peaks_pgi)-ground_truth) / f_s
error_sat = .5e3 * c * np.abs(np.array(peaks2_sat)-np.array(peaks_sat)-ground_truth) / f_s


plt.figure(figsize=figsize)
plt.semilogy(gains[2:], error_dsls[2:], '-o')
plt.semilogy(gains[2:], error_pgi[2:], '-x')
plt.semilogy(gains[2:], error_sat[2:], '-s')
plt.xticks(np.linspace(gains[2], gains[-1], 10))
plt.xlabel('Gain [dB]')
plt.ylabel('Absolute error [mm]')
plt.legend(['DSLS', 'DPG', 'Saturated'])
plt.grid()
plt.tight_layout()
plt.savefig('thickness_error.eps')
print(error_dsls)
print(error_pgi)

ind = [3,10, -1]
print(gains[ind])
for i in ind:
  plt.figure(figsize=figsize)
  plt.plot(t*1e6, np.abs(hilbert(pulse)), '-', alpha=.5, linewidth=3)
  plt.plot(t*1e6, np.abs(hilbert(gs[i]*factors[i])), 'r', linewidth=1)
  plt.plot(t*1e6, np.abs(hilbert(fs_pgi[i]*factors[i])), '--k', linewidth=1)
  plt.legend(['0dB Template', 'Saturated', 'Recovered'])
  plt.xlabel('time [µs]')
  plt.ylabel('Rescaled amplitude')
  plt.tight_layout()
  plt.savefig(f'thickness_{int(gains[i])}dB.eps')

t_s = 1/f_s
plt.figure(figsize=(6/1.2,6/1.2))
plt.plot(t*1e6, gs[0], ':o')
plt.plot(t*1e6, gs[-1]*.019, ':.')
yticks = np.arange(-24, 68, 4)
plt.yticks(yticks)
ytext = [None] * len(yticks)
ytext[0] = str(int(-24/4))
ytext[6] = '0'
ytext[-1] = str(int(64/4))
plt.gca().set_yticklabels(ytext)
height = 100
plt.axis([t_s*200e6, t_s*260e6, -25, 65])
plt.xlabel('time [µs]')
plt.legend([str(int(gains[0]))+' dB', str(int(gains[-1]))+' dB'])
plt.grid()
plt.savefig('quantization.eps')

plt.figure(figsize=figsize)
plt.plot(t*1e6, pulse, '-', linewidth=1.5)
plt.xlabel('time [µs]')
plt.ylabel('Amplitude')
plt.tight_layout()
plt.savefig(f'thickness_{int(gains[i])}dB.eps')

plt.plot(np.abs(hilbert(gs[-2])))

G = fftshift(fft(gs[0]))
freqs = np.linspace(-f_s/2, f_s/2, len(G))
plt.plot(freqs, np.abs(G))
plt.axis([-2e7, 2e7, plt.axis()[2], plt.axis()[3]])

thickness = 25.11e-3
ground_truth = peaks2_sat[0] - peaks_sat[0]
c = 2 * 25.11e-3 * f_s / ground_truth
print(c)
error_dsls = np.abs(np.array(peaks2_dsls)-np.array(peaks_dsls)-ground_truth)
error_pgi = np.abs(np.array(peaks2_pgi)-np.array(peaks_pgi)-ground_truth)
error_sat = np.abs(np.array(peaks2_sat)-np.array(peaks_sat)-ground_truth)


plt.figure(figsize=figsize)
plt.semilogy(gains[2:], error_dsls[2:], '-o')
plt.semilogy(gains[2:], error_pgi[2:], '-x')
plt.semilogy(gains[2:], error_sat[2:], '-s')
plt.xticks(np.linspace(gains[2], gains[-1], 10))
plt.xlabel('Gain [dB]')
plt.ylabel('Absolute error [mm]')
plt.legend(['DSLS', 'DPG', 'Saturated'])
plt.grid()
plt.tight_layout()
plt.savefig('thickness_error.eps')
print(error_dsls)
print(error_pgi)