# -*- coding: utf-8 -*-
"""template waveform_synth.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bAjWdYWJXqrhUd9aHQZFmun22sqiBS46
"""

import numpy as np
import matplotlib
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt
from scipy.signal import gausspulse
from scipy.fft import fft, fftshift, fftfreq
from scipy.sparse.linalg import cg
from scipy.linalg import dft
from numpy.random import RandomState
from numpy.linalg import norm
from scipy.fft import ifft

def saturate(signal, max, min=None):
  if min is None:
    min = - max
  saturated = np.copy(signal)
  saturated[signal>max] = max
  saturated[signal<min] = min
  valid = np.ones_like(signal)
  valid[signal>=max] = 0
  valid[signal<=min] = 0
  return saturated, valid

def awgn(signal, snr):
  prng = RandomState(1234)
  wgn = prng.normal(0, 1, len(signal))
  wgn = wgn * np.linalg.norm(signal)*10**(-snr/20) / np.linalg.norm(wgn)
  #print('SNR is ' + str(20*np.log10(np.linalg.norm(pulse)/np.linalg.norm(wgn))))
  return signal + wgn

def desaturate_dsls(g, decimator, wmin, wmax):
# Decimated Subspace Least Squares (DSLS) (proposed method)
  D = np.diag(decimator)
  D = D[decimator>0, :]
  H = dft(len(g))
  Omega = fftfreq(len(g))
  HB = H[:, (wmin <= np.abs(Omega))*(np.abs(Omega) <= wmax)]
  b = D@g
  A = D@HB
  x = np.linalg.lstsq(A, b)
  d = HB @ x[0]
  d = np.real(d)
  return [d, 0]

def desaturate_pgi(g, decimator, wmin, wmax, niter=10000):
# Papoulis Gerchberg Iteration (PGI) (competing method)
  g0 = np.copy(g)
  Omega = fftfreq(len(g))
  def ideal_band_pass(g,  wmin, wmax):
    G = fft(g)
    G[np.abs(Omega) <= wmin] = 0.
    G[np.abs(Omega) >= wmax] = 0.
    g_ = np.real(ifft(G))
    return g_
  decimator = np.array(decimator, dtype=bool)
  deltas = np.zeros(niter)
  g_bp = ideal_band_pass(g, wmin, wmax)
  g_sub = g_bp
  g_sub[decimator] = g[decimator]
  g = g_sub
  for i in np.arange(1, niter):
    g_bp = ideal_band_pass(g, wmin, wmax)
    g_sub = g_bp
    g_sub[decimator] = g[decimator]
    deltas[i] = np.sum(g_sub*g0)/(norm(g_sub)*norm(g0))
    g = g_sub
  g_bp = ideal_band_pass(g, wmin, wmax)
  return [g_bp, deltas]

figsize=(6/1.2,3/1.2)

f_s = 125e6
fc = 5e6
t_init = 0
t_end = 1.5e-6
SNR = [15, 20, 25, 30]
t = np.arange(t_init, t_end, 1/f_s)
samples = np.arange(len(t))
pulse = np.roll(gausspulse(t-7e-7, fc=fc, bw=.6), 0)
G = (fft(pulse))
Omega = (fftfreq(len(pulse)))
G = G[:len(G)//2]
Omega = Omega[:len(Omega)//2]
band = np.abs(G) >= np.abs(G).max()/100
wmin = Omega[band][0]
wmax = Omega[band][-1]

msess_dsls = list()
msess_pgi = list()
mse_legend = list()
for snr_db in SNR:
  mse_legend.append(str(snr_db) + ' dB')
  plt.figure(figsize=figsize)
  legend = list()
  legend.append('original')
  pulse_wgn = awgn(pulse, snr_db)
  plt.plot(t*1e6, pulse_wgn, 'k')
  mses_dsls = list()
  fs_dsls = list()
  mses_pgi = list()
  fs_pgi = list()
  #for max in np.arange(.85, .0, -.1):
  for max in [.80, .40, .20, .10, .05]:
    g, decimator = saturate(pulse_wgn, max)
    f = desaturate_pgi(g, decimator, wmin=wmin, wmax=wmax)[0]
    fs_pgi.append(f)
    mse = np.linalg.norm(pulse-f)**2 / len(g)
    mses_pgi.append(mse)
    plt.plot(t*1e6, g, linewidth=.8)
    legend.append(str(int(np.round(max*100)))+'%')
    plt.ylabel('Amplitude')
    plt.xlabel('time [μs]')
    f = desaturate_dsls(g, decimator, wmin=wmin, wmax=wmax)[0]
    fs_dsls.append(f)
    mse = np.linalg.norm(pulse-f)**2 / len(g)
    mses_dsls.append(mse)
  plt.legend(legend, loc=1)
  axis = plt.axis()
  plt.grid()
  plt.tight_layout()
  plt.savefig('template_sat_'+str(snr_db)+'.eps')
  #plt.savefig('template_sat_'+str(snr_db)+'.png')

  plt.figure(figsize=figsize)
  plt.plot(t*1e6, pulse_wgn/pulse_wgn.max(), 'k')
  plt.xlabel('time [μs]')
  for f in fs_pgi:
    plt.plot(t*1e6, f, linewidth=.8)
  plt.ylabel('Reconstructed amplitude')
  plt.legend(legend, loc=1)
  #plt.axis(axis)
  plt.grid()
  plt.tight_layout()
  plt.savefig('template_rec_'+str(snr_db)+'.eps')

  G = fftshift(fft(pulse_wgn))
  Omega = fftshift(fftfreq(len(g)))
  plt.figure(figsize=figsize)
  fshow = 20
  plt.semilogy(f_s*1e-6*Omega, np.abs(G), '.-', linewidth=.5, color='gray')
  mask = (wmin<=Omega) * (Omega<=wmax)
  plt.semilogy(f_s*1e-6*Omega[mask], np.abs(G[mask]), '-ok')
  plt.axis([0, fshow, plt.axis()[2], plt.axis()[3]])
  plt.xticks(np.linspace(0, int(fshow), 5))
  plt.xlabel('Frequency [MHz]')
  plt.ylabel('DFT Magnitude')
  plt.grid()
  plt.legend(['Discarded', 'Used'])
  plt.tight_layout()
  plt.savefig('template_spe_'+str(snr_db)+'.eps')

  msess_pgi.append(mses_pgi)
  msess_dsls.append(mses_dsls)

plt.figure(figsize=figsize)
styles = [':o', ':^', ':s', ':x', ':v']
for i in range(len(msess_pgi)):
  plt.semilogy(msess_pgi[i], styles[i])
plt.xticks(range(len(msess_pgi)+1))
ax = plt.gca()
ax.set_xticklabels(legend[1:])
plt.ylabel('MSE (DPG)')
plt.xlabel('Saturation level')
plt.legend(mse_legend)
plt.axis([plt.axis()[0], plt.axis()[1], 1e-6, 1])
plt.yticks(np.logspace(-6, 0, 7))
plt.grid()
plt.tight_layout()
plt.savefig('template_mse_pgi.eps')

plt.figure(figsize=figsize)
styles = [':o', ':^', ':s', ':x', ':v']
for i in range(len(msess_dsls)):
  plt.semilogy(msess_dsls[i], styles[i])
plt.xticks(range(len(msess_dsls)+1))
ax = plt.gca()
ax.set_xticklabels(legend[1:])
plt.ylabel('MSE (DSLS)')
plt.xlabel('Saturation level')
plt.legend(mse_legend)
plt.axis([plt.axis()[0], plt.axis()[1], 1e-6, 1])
plt.yticks(np.logspace(-6, 0, 7))
plt.grid()
plt.tight_layout()
plt.savefig('template_mse_dsls.eps')